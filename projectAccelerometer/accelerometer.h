/******************************************************************************
 * This file is part of the Microprocessor Systems II project.                *                                                 *
 ******************************************************************************/

/**
 * @file accelerometer.h
 * @author Jakub Płoskonka
 * @date styczen 2025
 * @brief File containing enums, structures and declarations for accelerometer MMA8451Q .
 * @ver 0.1
 */

#ifndef ACCELEROMETER_H
#define ACCELEROMETER_H

#include "frdm_bsp.h"
#include "i2c.h"

/******************************************************************************\
* Accelerometer Registers Definition
\******************************************************************************/
#define MMA8451Q_I2C_ADDRESS    0x1D    /* device address on the I2C bus */
#define MMA8451Q_REG_STATUS     0x00    /* stores information about the availability of new accelerometer data */ 
#define MMA8451Q_REG_OUT_X_MSB  0x01    /* reading the acceleration value for the X axis */ 
#define MMA8451Q_REG_OUT_Y_MSB  0x03    /* reading the acceleration value for the Y axis */
#define MMA8451Q_REG_OUT_Z_MSB  0x05    /* reading the acceleration value for the Z axis */
#define MMA8451Q_REG_CTRL_REG1  0x2A    /* accelerometer operating mode: active/standby and ODR sampling rate */    
#define MMA8451Q_REG_CTRL_REG2  0x2B    /* configuration of additional operating modes */
#define MMA8451Q_REG_INT_SOURCE 0x0C    /* interrupt sources generated by the accelerometer */
#define MMA8451Q_REG_INT2_CFG   0x2D    /* interrupt sources mapped to INT2 pin */
#define MMA8451Q_RANGE_2g       0x00   	/* ±2g */

struct accelerometer_data_t {			// Declaration of a structure to store accelerometer data
    double x;                           // X axis acceleration
    double y;                           // Y axis acceleration
    double z;                           // Z axis acceleration
};
/**
 * @brief Accelerometer initialization.
 */
void Accelerometer_Init(void);
/**
 * @brief Read accelerometer data.
 * @param ACC_DATA Pointer to structure to store the data.
 */
void Accelerometer_ReadData(struct accelerometer_data_t *ACC_DATA);
/**
 * @brief Configure interrupt for INT2 pin.
 * @param enable Enable or disable interrupt.
 */
void Accelerometer_ConfigureINT2(uint8_t enable);
/**
 * @brief Check interrupt source.
 * @return Interrupt source register value.
 */
uint8_t Accelerometer_GetInterruptSource(void);

#endif  /* ACCELEROMETER_H */
